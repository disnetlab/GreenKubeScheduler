package energyawarescheduling

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"

	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/kubernetes/pkg/scheduler/framework"
)

type EnergyAwareScheduling struct {
	handle framework.Handle
}

var _ framework.PermitPlugin = &EnergyAwareScheduling{}

const (
	// Name 是插件的名称
	Name = "EnergyAwareScheduling"
)

func (e *EnergyAwareScheduling) Name() string {
	return Name
}

// Name 返回插件的名称
func fetchMetric(url string, metricName string) (float64, error) {
	resp, err := http.Get(url)
	if err != nil {
		return 0, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return 0, fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return 0, err
	}

	lines := strings.Split(string(body), "\n")
	var totalValue float64
	for _, line := range lines {
		if strings.HasPrefix(line, metricName) {
			parts := strings.Fields(line)
			if len(parts) < 2 {
				return 0, fmt.Errorf("invalid metric format")
			}
			value := parts[1]
			if value == "None" {
				totalValue += 0
			} else {
				parsedValue, err := strconv.ParseFloat(value, 64)
				if err != nil {
					return 0, err
				}
				totalValue += parsedValue
			}
		}
	}
	if totalValue == 0 {
		return 0, fmt.Errorf("metric not found")
	}
	return totalValue, nil
}

func energyCheck() bool {
	inverterURL := "http://192.168.0.2:8888/metrics"
	epduURL := "http://192.168.0.2:5000/metrics"

	inverterPower, err := fetchMetric(inverterURL, "inverter_p_ac1")
	if err != nil {
		fmt.Printf("Error fetching data from %s: %v\n", inverterURL, err)
		inverterPower = 0
	}

	epduPower, err := fetchMetric(epduURL, "epdu_watts")
	if err != nil {
		fmt.Printf("Error fetching data from %s: %v\n", epduURL, err)
		epduPower = 0
	}

	return inverterPower-epduPower > 0
}

// Permit 是在 Permit 扩展点调用的函数
func (e *EnergyAwareScheduling) Permit(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) (*framework.Status, time.Duration) {
	if energyCheck() {
		return framework.NewStatus(framework.Success, ""), 0
	}
	return framework.NewStatus(framework.Wait, "Insufficient energy"), 10 * time.Second
}

// New 创建并返回一个 EnergyAwareScheduling 插件实例
func New(_ context.Context, _ runtime.Object, handle framework.Handle) (framework.Plugin, error) {
	return &EnergyAwareScheduling{handle: handle}, nil
}
