package energyawarescheduling

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"

	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/kubernetes/pkg/scheduler/framework"
)

type EnergyAwareScheduling struct {
	handle framework.Handle
}

var _ framework.PermitPlugin = &EnergyAwareScheduling{}

const (
	// Name
	Name = "EnergyAwareScheduling"
)

func (e *EnergyAwareScheduling) Name() string {
	return Name
}

func fetchMetricWithTimestamp(url string) (float64, int, error) {
	resp, err := http.Get(url)
	if err != nil {
		return 0, 0, fmt.Errorf("cannot access %s: %v", url, err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return 0, 0, fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return 0, 0, err
	}

	var data map[string]string
	if err := json.Unmarshal(body, &data); err != nil {
		return 0, 0, err
	}

	valueStr, valueExists := data["value"]
	timestampStr, timestampExists := data["timestamp"]
	if !valueExists || !timestampExists {
		return 0, 0, fmt.Errorf("missing expected fields in the response")
	}

	value, err := strconv.ParseFloat(valueStr, 64)
	if err != nil {
		return 0, 0, err
	}

	timeParts := strings.Split(strings.TrimPrefix(timestampStr, "T"), ":")
	if len(timeParts) < 1 {
		return 0, 0, fmt.Errorf("invalid timestamp format")
	}

	hour, err := strconv.Atoi(timeParts[0])
	if err != nil {
		return 0, 0, err
	}

	return value, hour, nil
}

func fetchMetric(url string, metricName string) (float64, error) {
	resp, err := http.Get(url)
	if err != nil {
		return 0, fmt.Errorf("cannot access %s: %v", url, err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return 0, fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return 0, err
	}

	lines := strings.Split(string(body), "\n")
	var totalValue float64
	for _, line := range lines {
		if strings.HasPrefix(line, metricName) {
			parts := strings.Fields(line)
			if len(parts) < 2 {
				return 0, fmt.Errorf("invalid metric format")
			}
			value := parts[1]
			if value == "None" {
				fmt.Printf("%s: 0\n", metricName)
				totalValue += 0
			} else {
				parsedValue, err := strconv.ParseFloat(value, 64)
				if err != nil {
					return 0, err
				}
				totalValue += parsedValue
			}
		}
	}
	if totalValue == 0 {
		return 0, fmt.Errorf("metric not found")
	}
	return totalValue, nil
}

func fetchPrediction(url string) (float64, float64, error) {
	resp, err := http.Get(url)
	if err != nil {
		return 0, 0, fmt.Errorf("cannot access %s: %v", url, err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return 0, 0, fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return 0, 0, err
	}

	var data map[string]float64
	if err := json.Unmarshal(body, &data); err != nil {
		return 0, 0, err
	}

	predictedPower, predictedPowerExists := data["predicted_power"]
	averagePower, averagePowerExists := data["average_power"]
	if !predictedPowerExists || !averagePowerExists {
		return 0, 0, fmt.Errorf("missing expected fields in the response")
	}

	return predictedPower, averagePower, nil
}

func checkPrediction() (bool, float64, float64) {
	// Fetch prediction data
	predictionURL := "http://203.101.228.91:12000/prediction"
	predictedPower, averagePower, err := fetchPrediction(predictionURL)
	if err != nil {
		fmt.Printf("Error fetching prediction data: %v\n", err)
		return false, predictedPower, averagePower
	}

	// Print predictedPower and averagePower
	fmt.Printf("Predicted power: %f, Average power: %f\n", predictedPower, averagePower)

	return predictedPower <= averagePower, predictedPower, averagePower
}

func energyCheck() (float64, float64, bool, int) {
	inverterURL := "http://192.168.0.2:6185/metrics"
	epduURL := "http://192.168.0.2:5000/metrics"

	inverterPower, currentHour, err := fetchMetricWithTimestamp(inverterURL)
	if err != nil {
		fmt.Printf("Error fetching data from %s: %v\n", inverterURL, err)
		inverterPower = 0
	}
	fmt.Printf("Solar power: %f\n", inverterPower)

	epduPower, err := fetchMetric(epduURL, "epdu_watts")
	if err != nil {
		fmt.Printf("Error fetching data from %s: %v\n", epduURL, err)
		epduPower = 0
	}

	fmt.Printf("EPDU power: %f\n", epduPower)

	return inverterPower, epduPower, inverterPower-epduPower > 0, currentHour
}

// Permit framework
func (e *EnergyAwareScheduling) Permit(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) (*framework.Status, time.Duration) {
	solarPower, epduPower, energySufficient, currentHour := energyCheck()

	//use for send it to prediction
	for _, container := range pod.Spec.Containers {
		fmt.Printf("Container name: %s, Image: %s\n", container.Name, container.Image)
	}

	if energySufficient {
		fmt.Printf("Sufficient energy: solar power = %f, EPDU power = %f\n", solarPower, epduPower)
		return framework.NewStatus(framework.Success, ""), 0
	}

	priorityStr, exists := pod.Labels["priority"]
	if !exists {
		fmt.Printf("Priority label not found, treating as low priority.\n")
		priorityStr = "1"
	}

	priority, err := strconv.Atoi(priorityStr)
	if err != nil {
		fmt.Printf("Invalid priority value, treating as low priority: %v\n", err)
		priority = 1
	}

	fmt.Printf("Current hour: %d\n", currentHour)

	if priority >= 7 {
		fmt.Printf("Not enough energy! solar power = %f, EPDU power = %f\n", solarPower, epduPower)
		fmt.Printf("High priority (%d), deploying despite insufficient energy.\n", priority)
		return framework.NewStatus(framework.Success, ""), 0
	}

	if priority >= 4 && priority <= 6 {
		fmt.Printf("Medium priority (%d)", priority)
		if currentHour >= 22 || currentHour <= 8 {
			fmt.Printf("Medium priority (%d) and off-peak hours, deploying despite insufficient energy.\n", priority)
			return framework.NewStatus(framework.Success, ""), 0
		}
	}

	predictionSatisfied, predictedPower, averagePower := checkPrediction()
	if predictionSatisfied {
		fmt.Printf("Predicted power (%f) is less than or equal to average power (%f), deploying.\n", predictedPower, averagePower)
		return framework.NewStatus(framework.Success, ""), 0
	}

	fmt.Printf("Not enough energy! solar power = %f, EPDU power = %f\n", solarPower, epduPower)
	fmt.Printf("Low priority (%d), waiting for energy to recover.\n", priority)
	return framework.NewStatus(framework.Wait, "Insufficient energy"), 3 * time.Second
}

// New EnergyAwareScheduling plugin object
func New(_ context.Context, _ runtime.Object, handle framework.Handle) (framework.Plugin, error) {
	return &EnergyAwareScheduling{handle: handle}, nil
}
